var supertest = require('supertest');
//var app = require('../test');
var app = require('../../app');
var assert = require('assert');
var bodyParser = require('body-parser');
var testConfig = require('../test-config');
var Users = require('../../../common/models/user');

var token = '';

describe('Prepare Admins Tests', function(){
  it('should delete all users', function(done) {
    Users.remove({}, function(err) {
      if (err) return done(err);
      done();
    });
  });
});


describe('Admins', function(){
  it('GET /dishes should fail and return 403', function(done) {
    supertest(app)
    .get('/dishes')
    .expect(403, done)
  });

  it('Should Fail Registration with no credentials', function(done){
    supertest(app)
    .post('/users/register')
    .set('Content-Type', 'application/json')
    .expect(500)
    .send({})
    .end(function(err, res){
      if (err) return done(err);

      done();
    })
  });

  it('Should Register with credentials', function(done){
    supertest(app)
    .post('/users/register')
    .set('Content-Type', 'application/json')
    .expect('Content-Type', /json/)
    .expect(200)
    .send(testConfig.adminCredentials)
    .end(function(err, res){
      if (err) return done(err);

      done();
    })
  });

  it('should manually upgrade account to admin', function(done) {
    Users.update(
      {username:testConfig.adminCredentials.username},
      {$set:{admin:true}},
      function(err) {
        if (err) return done(err);
        done();
      }
    );
  });

  it('Should Login with credentials', function(done){
    supertest(app)
    .post('/users/login')
    .set('Content-Type', 'application/json')
    .expect('Content-Type', /json/)
    .expect(200)
    .send(testConfig.adminCredentials)
    .end(function(err, res){
      if (err) return done(err);
      assert.notEqual(null, res.body.token);
      assert.notEqual(undefined, res.body.token);

      token = res.body.token;

      done();
    })
  });

  it('Should return 200 and be allowed to get users information', function(done){
    supertest(app)
    .get('/users/')
    .set('x-access-token', token)
    .expect('Content-Type', /json/)
    .expect(200)
    .end(function(err, res){
      if (err) return done(err);
      assert.notEqual([], res.body);

      done();
    })
  });

  it('GET /dishes/ should pass', function(done){
    supertest(app)
    .get('/dishes/')
    .set('x-access-token', token)
    .set('Accept', 'application/json')
    .expect('Content-Type', /json/)
    .expect(200)
    .end(function(err, res){
      if (err) return done(err);

      done();
    });
  });

  it('Should logout and receive a message', function(done){
    supertest(app)
    .get('/users/logout')
    .set('x-access-token', token)
    .expect('Content-Type', /json/)
    .expect(200)
    .end(function(err, res){
      if (err) return done(err);
      console.log('res.body = ' + res.body);

      done();
    })
  });
});

function extractId(text){
  var newId = text.substring(text.length - 24, text.length);
  return newId;
}
